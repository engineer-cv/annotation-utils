{
  "content": "1、JavaScript有哪些垃圾回收机制？有以下垃圾回收机制。标记清除（ mark and sweep）这是 JavaScript最常见的垃圾回收方式。当变量进入执行环境的时候，比如在函数中声明一个变量，垃圾回收器将其标记为“进入环境”。当变量离开环境的时候（函数执行结束），将其标记为“离开环境”。垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量，以及被环境中变量所引用的变量（闭包）的标记。在完成这些之后仍然存在的标记就是要删除的变量。引用计数（ reference counting）在低版本的E中经常会发生内存泄漏，很多时候就是因为它采用引用计数的方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数。当声明了一个变量并将个引用类型赋值给该变量的时候，这个值的引用次数就加1.如果该变量的值变成了另外一个，则这个值的引用次数减1.当这个值的引用次数变为0的时候，说明没有变量在使用，这个值没法被访问。因此，可以将它占用的空间回收，这样垃圾回收器会在运行的时候清理引用次数为0的值占用的空间在正中虽然 JavaScript对象通过标记清除的方式进行垃圾回收，但是BOM与DOM对象是用引用计数的方式回收垃圾的。也就是说，只要涉及BOM和DOM，就会出现循环引用问题2、列举几种类型的DOM节点有以下几类DOM节点。整个文档是一个文档（ Document）节点。每个HTML标签是一个元素（ Element）节点。每一个HTML属性是一个属性（ Attribute）节点。包含在HTML元素中的文本是文本（Text）节点。3、谈谈 script标签中 defer和 async属性的区别。区别如下。（1） defer属性规定是否延迟执行脚本，直到页面加载为止， async属性规定脚本一旦可用，就异步执行。（2） defer并行加载 JavaScript文件，会按照页面上 script标签的顺序执行， async并行加载 JavaScript文件，下载完成立即执行，不会按照页面上 script标签的顺序执行。4、说说你对闭包的理解。使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染；缺点是闭包会常驻内存，增加内存使用量，使用不当很容易造成内存泄漏。在JavaScript中，函数即闭包，只有函数才会产生作用域闭包有3个特性（1）函数嵌套函数。（2）在函数内部可以引用外部的参数和变量（3）参数和变量不会以垃圾回收机制回收\n",
  "labelCategories": [
    {
      "id": 0,
      "text": "名词",
      "color": "#eac0a2",
      "borderColor": "#a38671"
    },
    {
      "id": 1,
      "text": "动词",
      "color": "#619dff",
      "borderColor": "#436db2"
    },
    {
      "id": 2,
      "text": "形容词",
      "color": "#9d61ff",
      "borderColor": "#6d43b2"
    },
    {
      "id": 123,
      "text": "副词",
      "color": "#ff9d61",
      "borderColor": "#b26d43"
    }
  ],
  "labels": [
    {
      "id": 29293,
      "categoryId": 0,
      "startIndex": 0,
      "endIndex": 4
    },
    {
      "id": 1,
      "categoryId": 0,
      "startIndex": 32,
      "endIndex": 33
    },
    {
      "id": 7,
      "categoryId": 1,
      "startIndex": 46,
      "endIndex": 47
    },
    {
      "id": 9,
      "categoryId": 1,
      "startIndex": 64,
      "endIndex": 65
    },
    {
      "id": 10,
      "categoryId": 0,
      "startIndex": 217,
      "endIndex": 218
    },
    {
      "id": 11,
      "categoryId": 0,
      "startIndex": 220,
      "endIndex": 221
    },
    {
      "id": 12,
      "categoryId": 2,
      "startIndex": 218,
      "endIndex": 219
    },
    {
      "id": 13,
      "categoryId": 2,
      "startIndex": 221,
      "endIndex": 222
    },
    {
      "id": 14,
      "categoryId": 0,
      "startIndex": 79,
      "endIndex": 81
    },
    {
      "id": 15,
      "categoryId": 2,
      "startIndex": 84,
      "endIndex": 86
    }
  ],
  "connectionCategories": [
    {
      "id": 1231231,
      "text": "修饰"
    },
    {
      "id": 1,
      "text": "限定"
    },
    {
      "id": 2,
      "text": "是...的动作"
    }
  ],
  "connections": [
    {
      "id": 123,
      "categoryId": 2,
      "fromId": 29293,
      "toId": 14
    }
  ]
}
